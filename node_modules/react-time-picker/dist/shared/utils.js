'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAmPmLabels = exports.updateInputWidth = exports.max = exports.min = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _dateFormatter = require('./dateFormatter');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var isValidNumber = function isValidNumber(a) {
  return typeof a === 'number' && !isNaN(a);
};

var min = exports.min = function min() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return Math.min.apply(Math, _toConsumableArray(args.filter(isValidNumber)));
};
var max = exports.max = function max() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return Math.max.apply(Math, _toConsumableArray(args.filter(isValidNumber)));
};

var updateInputWidth = exports.updateInputWidth = function updateInputWidth(element) {
  var span = document.createElement('span');
  span.innerHTML = element.value || element.placeholder;

  var container = element.parentElement;

  container.appendChild(span);

  var _span$getBoundingClie = span.getBoundingClientRect(),
      width = _span$getBoundingClie.width;

  element.style.width = Math.ceil(width) + 'px';

  container.removeChild(span);
};

var getAmPmLabels = exports.getAmPmLabels = function getAmPmLabels(locale) {
  var amPmFormatter = (0, _dateFormatter.getFormatter)({ hour: 'numeric' }, locale);
  var amString = amPmFormatter(new Date(2017, 0, 1, 9));
  var pmString = amPmFormatter(new Date(2017, 0, 1, 21));

  var _amString$split = amString.split('9'),
      _amString$split2 = _slicedToArray(_amString$split, 2),
      am1 = _amString$split2[0],
      am2 = _amString$split2[1];

  var _pmString$split = pmString.split('9'),
      _pmString$split2 = _slicedToArray(_pmString$split, 2),
      pm1 = _pmString$split2[0],
      pm2 = _pmString$split2[1];

  if (am1 !== pm1) {
    return [am1, pm1].map(function (el) {
      return el.trim();
    });
  }

  if (am2 !== pm2) {
    return [am2, pm2].map(function (el) {
      return el.trim();
    });
  }

  // Fallback
  return ['am', 'pm'];
};